"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Credentials
SECRET_KEY = os.getenv(
    "SECRET_KEY",
    "django-insecure-dev-key-for-local-development-only-please-change-in-production",
)
DEBUG = os.getenv("PRODUCTION") != "1"  # Fixed the DEBUG logic

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    ".vercel.app",
    ".elasticbeanstalk.com",
    ".elb.amazonaws.com",
    "*",
]

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third party apps
    "rest_framework",
    "corsheaders",
    "pgvector",
    # Local apps
    "apps.core",
    "apps.events",
    "apps.clubs",
    "apps.promotions",
    "apps.newsletter",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "ratelimit.middleware.RatelimitMiddleware",
    "ratelimit.middleware.RatelimitMiddleware",
]

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # For development only
CORS_ALLOW_CREDENTIALS = True

# CSRF settings for development
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "https://wat2do.ca",
    "https://www.wat2do.ca",
]

# CSRF settings for SPA frontend
CSRF_COOKIE_SECURE = os.getenv("PRODUCTION") == "1"  # True in production (HTTPS)
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript to read the cookie for SPA
CSRF_COOKIE_SAMESITE = "Lax"  # Allow cross-site requests
CSRF_USE_SESSIONS = True  # Use sessions for CSRF tokens

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.app"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
if os.getenv("PRODUCTION") == "1":
    # Production database (Supabase)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("POSTGRES_DB", "postgres"),
            "USER": os.getenv("POSTGRES_USER", "postgres"),
            "PASSWORD": os.getenv("POSTGRES_PASSWORD", "your-supabase-password"),
            "HOST": os.getenv("POSTGRES_HOST", "your-project.supabase.co"),
            "PORT": os.getenv("POSTGRES_PORT", "6543"),
            "OPTIONS": {
                "options": "-c pool_mode=session",
                "sslmode": "require",
            },
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("LOCAL_POSTGRES_DB", "postgres"),
            "USER": os.getenv("LOCAL_POSTGRES_USER", "postgres"),
            "PASSWORD": os.getenv("LOCAL_POSTGRES_PASSWORD", "postgres"),
            "HOST": os.getenv("LOCAL_POSTGRES_HOST", "localhost"),
            "PORT": os.getenv("LOCAL_POSTGRES_PORT", "5432"),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Django REST Framework settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Email confirmation settings
BASE_URL = (
    "https://api.wat2do.ca" if os.getenv("PRODUCTION") == "1" else "http://localhost:8000"
)
FRONTEND_URL = (
    "https://wat2do.ca" if os.getenv("PRODUCTION") == "1" else "http://localhost:5173"
)

# Global rate limiting settings
RATELIMIT_VIEW = "ratelimit.views.ratelimited"
RATELIMIT_USE_CACHE = "default"
RATELIMIT_ENABLE = True

# Global rate limits (applied to all routes)
RATELIMIT_GLOBAL = "200/h"  # 1000 requests per hour per IP globally
RATELIMIT_GROUP = {
    "api": "100/h",  # 100 requests per hour for API endpoints
}
