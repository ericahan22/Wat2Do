# Generated by Django 4.2.7 on 2025-10-05 00:00

import os

from django.db import migrations
from dotenv import load_dotenv
from openai import OpenAI

from services.openai_service import generate_embedding

# Load environment variables
load_dotenv()

# Initialize OpenAI client
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))


def generate_event_description(event_data: dict) -> str:
    """
    Generate a concise description for an event using GPT-4o mini.
    """
    # Build event information string
    event_info = f"""
Event Name: {event_data['name']}
Date: {event_data['date']}
Start Time: {event_data['start_time']}
End Time: {event_data['end_time']}
Location: {event_data['location']}
Price: {event_data['price'] if event_data['price'] else 'Free'}
Food: {event_data['food'] if event_data['food'] else 'None'}
Registration Required: {'Yes' if event_data['registration'] else 'No'}
Club Handle: {event_data['club_handle'] if event_data['club_handle'] else 'N/A'}
Club Type: {event_data['club_type'] if event_data['club_type'] else 'N/A'}
    """.strip()

    prompt = f"""Based on the following event information:

{event_info}

Create a concise, keyword-rich description under 20 words that highlights the most important aspects like event type, key activities, food, location, date, or special features. DO NOT RESPOND WITH ANYTHING ELSE BESIDES THE DESCRIPTION"""

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": "You are a helpful assistant that creates concise event descriptions.",
                },
                {"role": "user", "content": prompt},
            ],
            temperature=0.3,
            max_tokens=100,
        )

        description = response.choices[0].message.content.strip()
        # Remove quotes if present
        description = description.strip('"').strip("'")
        return description

    except Exception as e:
        print(f"Error generating description: {e}")
        # Fallback to a basic description
        return (
            f"{event_data['name']} at {event_data['location']} on {event_data['date']}"
        )


def populate_descriptions_and_embeddings(apps, schema_editor):
    """
    Generate descriptions for all events using GPT-4o mini and update their embeddings.
    """
    with schema_editor.connection.cursor() as cursor:
        # Get all events
        cursor.execute(
            """
            SELECT id, club_handle, name, date, start_time, end_time, 
                   location, price, food, registration, club_type
            FROM events 
        """
        )
        events = cursor.fetchall()

        total_events = len(events)
        if total_events == 0:
            print("No events found.")
            return

        print(
            f"Generating descriptions and embeddings for {total_events} events using GPT-4o mini..."
        )

        for i, (
            event_id,
            club_handle,
            name,
            date,
            start_time,
            end_time,
            location,
            price,
            food,
            registration,
            club_type,
        ) in enumerate(events, 1):
            try:
                # Create event data dictionary
                event_data = {
                    "club_handle": club_handle or "",
                    "name": name or "",
                    "date": str(date) if date else "",
                    "start_time": str(start_time) if start_time else "",
                    "end_time": str(end_time) if end_time else "",
                    "location": location or "",
                    "price": price,
                    "food": food or "",
                    "registration": registration,
                    "club_type": club_type or "",
                }

                # Generate description using GPT-4o mini
                description = generate_event_description(event_data)

                # Generate embedding based on the description
                embedding = generate_embedding(description)

                # Update the event with description and embedding
                cursor.execute(
                    "UPDATE events SET description = %s, embedding = %s::vector WHERE id = %s",
                    [description, embedding, event_id],
                )

                if i % 10 == 0:  # Progress indicator
                    print(f"Processed {i}/{total_events} events...")

            except Exception as e:
                print(f"Error processing event {event_id} ({name}): {e}")
                continue

        print(
            f"Completed generating descriptions and embeddings for {total_events} events."
        )


def reverse_populate_descriptions_and_embeddings(apps, schema_editor):
    """
    Clear descriptions and embeddings from events.
    """
    with schema_editor.connection.cursor() as cursor:
        cursor.execute("UPDATE events SET description = NULL, embedding = NULL")
        print("Cleared all descriptions and embeddings from events.")


class Migration(migrations.Migration):
    dependencies = [
        ("example", "0016_add_events_ordering"),
    ]

    operations = [
        migrations.RunPython(
            populate_descriptions_and_embeddings,
            reverse_populate_descriptions_and_embeddings,
        ),
    ]
